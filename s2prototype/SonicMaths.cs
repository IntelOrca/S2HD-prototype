using System;

namespace IntelOrca.Sonic
{
	static class SonicMaths
	{
		public static readonly sbyte[] AngleData = new sbyte[] {
			0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 
			0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05, 0x05, 
			0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 
			0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 
			0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 
			0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 
			0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 
			0x13, 0x13, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 
			0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x17, 
			0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 
			0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 
			0x1A, 0x1A, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x1C, 0x1C, 
			0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1C, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 0x1D, 
			0x1D, 0x1D, 0x1D, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1E, 0x1F, 0x1F, 
			0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 
			0x20, 0x00
		};

		public static readonly byte[] SineData = new byte[] {
			0x00, 0x00, 0x00, 0x06, 0x00, 0x0C, 0x00, 0x12, 0x00, 0x19, 0x00, 0x1F, 0x00, 0x25, 0x00, 0x2B, 
			0x00, 0x31, 0x00, 0x38, 0x00, 0x3E, 0x00, 0x44, 0x00, 0x4A, 0x00, 0x50, 0x00, 0x56, 0x00, 0x5C, 
			0x00, 0x61, 0x00, 0x67, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x78, 0x00, 0x7E, 0x00, 0x83, 0x00, 0x88, 
			0x00, 0x8E, 0x00, 0x93, 0x00, 0x98, 0x00, 0x9D, 0x00, 0xA2, 0x00, 0xA7, 0x00, 0xAB, 0x00, 0xB0, 
			0x00, 0xB5, 0x00, 0xB9, 0x00, 0xBD, 0x00, 0xC1, 0x00, 0xC5, 0x00, 0xC9, 0x00, 0xCD, 0x00, 0xD1, 
			0x00, 0xD4, 0x00, 0xD8, 0x00, 0xDB, 0x00, 0xDE, 0x00, 0xE1, 0x00, 0xE4, 0x00, 0xE7, 0x00, 0xEA, 
			0x00, 0xEC, 0x00, 0xEE, 0x00, 0xF1, 0x00, 0xF3, 0x00, 0xF4, 0x00, 0xF6, 0x00, 0xF8, 0x00, 0xF9, 
			0x00, 0xFB, 0x00, 0xFC, 0x00, 0xFD, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 
			0x01, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFD, 0x00, 0xFC, 
			0x00, 0xFB, 0x00, 0xF9, 0x00, 0xF8, 0x00, 0xF6, 0x00, 0xF4, 0x00, 0xF3, 0x00, 0xF1, 0x00, 0xEE, 
			0x00, 0xEC, 0x00, 0xEA, 0x00, 0xE7, 0x00, 0xE4, 0x00, 0xE1, 0x00, 0xDE, 0x00, 0xDB, 0x00, 0xD8, 
			0x00, 0xD4, 0x00, 0xD1, 0x00, 0xCD, 0x00, 0xC9, 0x00, 0xC5, 0x00, 0xC1, 0x00, 0xBD, 0x00, 0xB9, 
			0x00, 0xB5, 0x00, 0xB0, 0x00, 0xAB, 0x00, 0xA7, 0x00, 0xA2, 0x00, 0x9D, 0x00, 0x98, 0x00, 0x93, 
			0x00, 0x8E, 0x00, 0x88, 0x00, 0x83, 0x00, 0x7E, 0x00, 0x78, 0x00, 0x73, 0x00, 0x6D, 0x00, 0x67, 
			0x00, 0x61, 0x00, 0x5C, 0x00, 0x56, 0x00, 0x50, 0x00, 0x4A, 0x00, 0x44, 0x00, 0x3E, 0x00, 0x38, 
			0x00, 0x31, 0x00, 0x2B, 0x00, 0x25, 0x00, 0x1F, 0x00, 0x19, 0x00, 0x12, 0x00, 0x0C, 0x00, 0x06, 
			0x00, 0x00, 0xFF, 0xFA, 0xFF, 0xF4, 0xFF, 0xEE, 0xFF, 0xE7, 0xFF, 0xE1, 0xFF, 0xDB, 0xFF, 0xD5, 
			0xFF, 0xCF, 0xFF, 0xC8, 0xFF, 0xC2, 0xFF, 0xBC, 0xFF, 0xB6, 0xFF, 0xB0, 0xFF, 0xAA, 0xFF, 0xA4, 
			0xFF, 0x9F, 0xFF, 0x99, 0xFF, 0x93, 0xFF, 0x8B, 0xFF, 0x88, 0xFF, 0x82, 0xFF, 0x7D, 0xFF, 0x78, 
			0xFF, 0x72, 0xFF, 0x6D, 0xFF, 0x68, 0xFF, 0x63, 0xFF, 0x5E, 0xFF, 0x59, 0xFF, 0x55, 0xFF, 0x50, 
			0xFF, 0x4B, 0xFF, 0x47, 0xFF, 0x43, 0xFF, 0x3F, 0xFF, 0x3B, 0xFF, 0x37, 0xFF, 0x33, 0xFF, 0x2F, 
			0xFF, 0x2C, 0xFF, 0x28, 0xFF, 0x25, 0xFF, 0x22, 0xFF, 0x1F, 0xFF, 0x1C, 0xFF, 0x19, 0xFF, 0x16, 
			0xFF, 0x14, 0xFF, 0x12, 0xFF, 0x0F, 0xFF, 0x0D, 0xFF, 0x0C, 0xFF, 0x0A, 0xFF, 0x08, 0xFF, 0x07, 
			0xFF, 0x05, 0xFF, 0x04, 0xFF, 0x03, 0xFF, 0x02, 0xFF, 0x02, 0xFF, 0x01, 0xFF, 0x01, 0xFF, 0x01, 
			0xFF, 0x00, 0xFF, 0x01, 0xFF, 0x01, 0xFF, 0x01, 0xFF, 0x02, 0xFF, 0x02, 0xFF, 0x03, 0xFF, 0x04, 
			0xFF, 0x05, 0xFF, 0x07, 0xFF, 0x08, 0xFF, 0x0A, 0xFF, 0x0C, 0xFF, 0x0D, 0xFF, 0x0F, 0xFF, 0x12, 
			0xFF, 0x14, 0xFF, 0x16, 0xFF, 0x19, 0xFF, 0x1C, 0xFF, 0x1F, 0xFF, 0x22, 0xFF, 0x25, 0xFF, 0x28, 
			0xFF, 0x2C, 0xFF, 0x2F, 0xFF, 0x33, 0xFF, 0x37, 0xFF, 0x3B, 0xFF, 0x3F, 0xFF, 0x43, 0xFF, 0x47, 
			0xFF, 0x4B, 0xFF, 0x50, 0xFF, 0x55, 0xFF, 0x59, 0xFF, 0x5E, 0xFF, 0x63, 0xFF, 0x68, 0xFF, 0x6D, 
			0xFF, 0x72, 0xFF, 0x78, 0xFF, 0x7D, 0xFF, 0x82, 0xFF, 0x88, 0xFF, 0x8B, 0xFF, 0x93, 0xFF, 0x99, 
			0xFF, 0x9F, 0xFF, 0xA4, 0xFF, 0xAA, 0xFF, 0xB0, 0xFF, 0xB6, 0xFF, 0xBC, 0xFF, 0xC2, 0xFF, 0xC8, 
			0xFF, 0xCF, 0xFF, 0xD5, 0xFF, 0xDB, 0xFF, 0xE1, 0xFF, 0xE7, 0xFF, 0xEE, 0xFF, 0xF4, 0xFF, 0xFA, 
			0x00, 0x00, 0x00, 0x06, 0x00, 0x0C, 0x00, 0x12, 0x00, 0x19, 0x00, 0x1F, 0x00, 0x25, 0x00, 0x2B, 
			0x00, 0x31, 0x00, 0x38, 0x00, 0x3E, 0x00, 0x44, 0x00, 0x4A, 0x00, 0x50, 0x00, 0x56, 0x00, 0x5C, 
			0x00, 0x61, 0x00, 0x67, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x78, 0x00, 0x7E, 0x00, 0x83, 0x00, 0x88, 
			0x00, 0x8E, 0x00, 0x93, 0x00, 0x98, 0x00, 0x9D, 0x00, 0xA2, 0x00, 0xA7, 0x00, 0xAB, 0x00, 0xB0, 
			0x00, 0xB5, 0x00, 0xB9, 0x00, 0xBD, 0x00, 0xC1, 0x00, 0xC5, 0x00, 0xC9, 0x00, 0xCD, 0x00, 0xD1, 
			0x00, 0xD4, 0x00, 0xD8, 0x00, 0xDB, 0x00, 0xDE, 0x00, 0xE1, 0x00, 0xE4, 0x00, 0xE7, 0x00, 0xEA, 
			0x00, 0xEC, 0x00, 0xEE, 0x00, 0xF1, 0x00, 0xF3, 0x00, 0xF4, 0x00, 0xF6, 0x00, 0xF8, 0x00, 0xF9, 
			0x00, 0xFB, 0x00, 0xFC, 0x00, 0xFD, 0x00, 0xFE, 0x00, 0xFE, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF
		};

		private static Random RandomGenerator = new Random();

		public static int Sin(int angle)
		{
			int offset = (angle & 0xFF) * 2;
			byte a = SineData[offset];
			byte b = SineData[offset + 1];
			return (short)((a << 8) | b);
		}

		public static int Cos(int angle)
		{
			int offset = (angle & 0xFF) * 2;
			byte a = SineData[offset + 128];
			byte b = SineData[offset + 128 + 1];
			return (short)((a << 8) | b);
		}

		/// <summary>
		/// Subroutine to calculate arctangent of y / x
		/// </summary>
		public static int Atan2(int x, int y)
		{
			int angle, absx, absy;

			// If x and y are 0, return down angle
			if (x == 0 && y == 0)
				return 64;

			absx = Math.Abs(x);
			absy = Math.Abs(y);
			if (absy < absx)
				angle = SonicMaths.AngleData[(absy * 8) / absx];
			else
				angle = 64 - SonicMaths.AngleData[(absx * 8) / absy];

			if (x <= 0)
				angle = 128 - angle;
			if (y <= 0)
				angle = 256 - angle;

			if ((angle & 0x80) != 0)
				return BitConverter.ToInt32(new byte[] { (byte)angle, 0xFF, 0xFF, 0xFF }, 0);
			return angle;
		}

		public static int Random(int maxValue)
		{
			return RandomGenerator.Next(maxValue);
		}

		public static int Random(int minValue, int maxValue)
		{
			return RandomGenerator.Next(minValue, maxValue);
		}
	}
}
